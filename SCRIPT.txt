local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
print("igil")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

do
    Fluent:Notify({
        Title = "Start",
        Content = "Thanks for using GvScript",
        SubContent = "", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })
end

local function GetVehicleFromDescendant(Descendant)
    return
        Descendant:FindFirstAncestor(LocalPlayer.Name .. "'s Car") or
        (Descendant:FindFirstAncestor("Body") and Descendant:FindFirstAncestor("Body").Parent) or
        (Descendant:FindFirstAncestor("Misc") and Descendant:FindFirstAncestor("Misc").Parent) or
        Descendant:FindFirstAncestorWhichIsA("Model")
 end

 local Vehicle = GetVehicleFromDescendant(LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").SeatPart)
 local flPart = Vehicle.Wheels.FL
 local frPart = Vehicle.Wheels.FR
 local RRPart = Vehicle.Wheels.RR
 local RLPart = Vehicle.Wheels.RL

if frPart:IsA("BasePart") then
 
    local currentProperties = frPart.CustomPhysicalProperties
    local density = 0 -- иди нахуй (не меняй)
    local friction = 0.1 -- хасан
    local elasticity = 0.5 -- да иди нахуй блять
    local frictionWeight = 1
    local elasticityWeight = 1

    if currentProperties then
        -- Если уже есть то вотэ т а кароче делай
        density = currentProperties.Density
        friction = 0.1 -- все равно изменяет хасан
        elasticity = currentProperties.Elasticity
        frictionWeight = currentProperties.FrictionWeight
        elasticityWeight = currentProperties.ElasticityWeight
    end

    -- ээээээээээээммммм учимся програмироовать роблокс студио
local newProperties = PhysicalProperties.new(
        density,
        friction,
        elasticity,
        frictionWeight,
        elasticityWeight
     )
     frPart.CustomPhysicalProperties = newProperties
     flPart.CustomPhysicalProperties = newProperties
     RRPart.CustomPhysicalProperties = newProperties
     RLPart.CustomPhysicalProperties = newProperties
 end

local Vehicle1 = GetVehicleFromDescendant(LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").SeatPart)

local Sbros1 = Vehicle.Wheels.FL.Spring.MaxLength
local Sbros2 = Vehicle.Wheels.FL.Spring.MinLength
local Sbros3 = Vehicle.Wheels.RL.Spring.MaxLength
local Sbros4 = Vehicle.Wheels.RL.Spring.MinLength
local Spring1 = Vehicle.Wheels.FL.Spring.FreeLength
local Spring2 = Vehicle.Wheels.RL.Spring.FreeLength
local Damping1 = Vehicle.Wheels.FL.Spring.Damping
local Damping2 = Vehicle.Wheels.RL.Spring.Damping

local Window = Fluent:CreateWindow({
    Title = "GvScript " .. Fluent.Version,
    SubTitle = "by Feenchi",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
 })

 --Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Spring", Icon = "" }),
    Physics = Window:AddTab({ Title = "Physics", Icon = "" }),
    Musor = Window:AddTab({ Title = "Musor", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
 }

 local Options = Fluent.Options



Tabs.Main:AddButton({
        Title = "UnLimit Spring",
        Description = "Убрать лимит подвески",
        Callback = function(con)
            Window:Dialog({
                Title = "UnLimit Spring",
                Content = "Убрать лимит до респавна авто?",
                Buttons = {
                    {
                        Title = "Да",
                        Callback = function(con)

                    Vehicle.Wheels.FL.Spring.MaxLength = 100 
                    Vehicle.Wheels.FR.Spring.MaxLength = 100
                    Vehicle.Wheels.RL.Spring.MaxLength = 100
                    Vehicle.Wheels.RR.Spring.MaxLength = 100

                    Vehicle.Wheels.FL.Spring.MinLength = 1
                    Vehicle.Wheels.FR.Spring.MinLength = 1
                    Vehicle.Wheels.RL.Spring.MinLength = 1
                    Vehicle.Wheels.RR.Spring.MinLength = 1

                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Нет",
                        Callback = function(no1)
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })
    
    
local Sliderheight = Tabs.Main:AddSlider("Slider", {
        Title = "All",
        Description = "Изменять высоту подвески",
        Default = Vehicle.Wheels.FL.Spring.FreeLength,
        Min = 0,
        Max = 10,
        Rounding = 2,
        Callback = function(Value)

        Vehicle.Wheels.FL.Spring.FreeLength = Value
        Vehicle.Wheels.FR.Spring.FreeLength = Value
        Vehicle.Wheels.RL.Spring.FreeLength = Value
        Vehicle.Wheels.RR.Spring.FreeLength = Value 

            print("Slider was changed:", Value)
        end
     })

local SliderheightFR = Tabs.Main:AddSlider("Slider", {
        Title = "FR",
        Description = "",
        Default = Vehicle.Wheels.FR.Spring.FreeLength,
        Min = 0,
        Max = 10,
        Rounding = 2,
        Callback = function(FR)

        Vehicle.Wheels.FR.Spring.FreeLength = FR

            print("Slider was changed:", FR)
        end
    })

local SliderheightFL = Tabs.Main:AddSlider("Slider", {
        Title = "FL",
        Description = "",
        Default = Vehicle.Wheels.FR.Spring.FreeLength,
        Min = 0,
        Max = 10,
        Rounding = 2,
        Callback = function(FL)

        Vehicle.Wheels.FL.Spring.FreeLength = FL

            print("Slider was changed:", FL)
        end
    })

local SliderheightRR = Tabs.Main:AddSlider("Slider", {
        Title = "RR",
        Description = "",
        Default = Vehicle.Wheels.FR.Spring.FreeLength,
        Min = 0,
        Max = 10,
        Rounding = 2,
        Callback = function(RR)

        Vehicle.Wheels.RR.Spring.FreeLength = RR

            print("Slider was changed:", RR)
        end
    })


local SliderheightRL = Tabs.Main:AddSlider("Slider", {
        Title = "RL",
        Description = "",
        Default = Vehicle.Wheels.FR.Spring.FreeLength,
        Min = 0,
        Max = 10,
        Rounding = 2,
        Callback = function(RL)

        Vehicle.Wheels.RL.Spring.FreeLength = RL

            print("Slider was changed:", RL)
        end
    })

Slider:SetValue(Vehicle.Wheels.FR.Spring.FreeLength)
    
local SliderDamping = Tabs.Main:AddSlider("Slider", {
        Title = "Damping",
        Description = "Изментять силу амортизаторов ",
        Default = Vehicle.Wheels.FR.Spring.Damping,
        Min = 0,
        Max = 2000,
        Rounding = 0.5,
        Callback = function(Damping)

        Vehicle.Wheels.FL.Spring.Damping = Damping
        Vehicle.Wheels.FR.Spring.Damping = Damping
        Vehicle.Wheels.RL.Spring.Damping = Damping
        Vehicle.Wheels.RR.Spring.Damping = Damping

            print("Slider was changed:", Damping)
        end
    })
    Slider:OnChanged(function(Damping)
        print("Slider changed:", Damping)
    end)


    Slider:SetValue(Damping1)

Tabs.Main:AddButton({
        Title = "Сброс настроек подвески",
        Description = "Сбросить настройки подвески до начальных",
        Callback = function(con)
            Window:Dialog({
                Title = "Вы уверены?",
                Content = "Ваши настройки подвески вернуться к начальным.",
                Buttons = {
                    {
                        Title = "Да",
                        Callback = function(con)

                    Vehicle.Wheels.FL.Spring.MaxLength = Sbros1 -- я ебал как ты переменные называешь
                    Vehicle.Wheels.FR.Spring.MaxLength = Sbros1
                    Vehicle.Wheels.RL.Spring.MaxLength = Sbros3
                    Vehicle.Wheels.RR.Spring.MaxLength = Sbros3

                    Vehicle.Wheels.FL.Spring.MinLength = Sbros2
                    Vehicle.Wheels.FR.Spring.MinLength = Sbros2
                    Vehicle.Wheels.RL.Spring.MinLength = Sbros4
                    Vehicle.Wheels.RR.Spring.MinLength = Sbros4

                    Vehicle.Wheels.FL.Spring.FreeLength = Spring1
                    Vehicle.Wheels.FR.Spring.FreeLength = Spring1
                    Vehicle.Wheels.RL.Spring.FreeLength = Spring2
                    Vehicle.Wheels.RR.Spring.FreeLength = Spring2

                    Vehicle.Wheels.FL.Spring.Damping = Damping1
                    Vehicle.Wheels.FR.Spring.Damping = Damping1
                    Vehicle.Wheels.RL.Spring.Damping = Damping2
                    Vehicle.Wheels.RR.Spring.Damping = Damping2

		    SliderheightFR:SetValue(Spring1)
                    SliderheightFL:SetValue(Spring1)
                    SliderheightRR:SetValue(Spring2)
                    SliderheightRL:SetValue(Spring2)
                    SliderDamping:SetValue(Damping1)


                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Нет",
                        Callback = function(no1)
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })
    


 -- Обновляем Dropdown для пресетов
local FrictionPresets = {
    ["Хасан (1.3)"] = 1.3,       -- маненврость больше да, ьбыстро поваорочиьек
    ["Дрифт (0.1)"] = 0.1,     -- низко очень (можеш поменят)
    ["Дефолт (0.7)"] = 0.7,    -- ну это чисто среднячок
    ["Оффроуд (1)"] = 1,    -- чтоп мащина не скатилась
    ["Драг (2)"] = 2    
 }

local Dropdown = Tabs.Physics:AddDropdown("FrictionPresets", {
    Title = "Friction Presets",
    Values = {"Хасан (1.3)", "Дрифт (0.1)", "Дефолт (0.7)", "Оффроуд (1)","Драг (2)"},
    Multi = false,
    Default = "Трэк",
    Callback = function(SelectedPreset)
        -- выбор да короче пресета владвае пидорас
        local frictionValue = FrictionPresets[SelectedPreset]

        -- ну ты понял, тут оно делает вещи влад вае пидор
        local newProperties = PhysicalProperties.new(
            frPart.CustomPhysicalProperties.Density,
            frictionValue, -- Устанавливаем трение из пресета
            frPart.CustomPhysicalProperties.Elasticity,
            frPart.CustomPhysicalProperties.FrictionWeight,
            frPart.CustomPhysicalProperties.ElasticityWeight
        )

        -- тут тоже делает вещи влад вае пидорс
        frPart.CustomPhysicalProperties = newProperties
        flPart.CustomPhysicalProperties = newProperties
        RRPart.CustomPhysicalProperties = newProperties
        RLPart.CustomPhysicalProperties = newProperties

        print("Selected Preset:", SelectedPreset, "Friction set to:", frictionValue)
    end
 })

 -- дефолт кароче
 Dropdown:SetValue("Дефолт")

local SliderFriction = Tabs.Physics:AddSlider("FrictionSlider", {
    Title = "Friction Control",
    Description = "Изменяет трение колес",
    Default = 0.7, -- Стартовое значение трения
    Min = 0.01,
    Max = 1,
    Rounding = 2.5,
    Callback = function(Value)
        -- вот кароче меняет тут всё 
        local newProperties = PhysicalProperties.new(
            frPart.CustomPhysicalProperties.Density,
            Value, -- это вот это хасан дпифт да понял
            frPart.CustomPhysicalProperties.Elasticity,
            frPart.CustomPhysicalProperties.FrictionWeight,
            frPart.CustomPhysicalProperties.ElasticityWeight
        )
        
        -- обновляет физику
        frPart.CustomPhysicalProperties = newProperties
        flPart.CustomPhysicalProperties = newProperties
        RRPart.CustomPhysicalProperties = newProperties
        RLPart.CustomPhysicalProperties = newProperties

        print("Friction was changed:", Value)
    end
 })

 SliderFriction:SetValue(frPart.CustomPhysicalProperties.Friction) --фенчик гандом

    
local MultiDropdown = Tabs.Musor:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



local Colorpicker = Tabs.Musor:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



local TColorpicker = Tabs.Musor:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



local Keybind = Tabs.Musor:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


local Input = Tabs.Musor:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function(ZZZ)
        print("Input updated:", Input.Value)
    end)




-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)
do
    Fluent:Notify({
    Title = "Successfully",
    Content = "GvScript has started successfully.",
    Duration = 8
 })

end
-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
